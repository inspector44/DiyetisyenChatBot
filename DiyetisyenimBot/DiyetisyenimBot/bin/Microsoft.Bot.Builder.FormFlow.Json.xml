<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder.FormFlow.Json</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Json.FieldJson">
            <summary>
            %Field defined through JSON Schema.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Json.FieldJson.#ctor(Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson,System.String)">
            <summary>
            Construct a field from a JSON schema.
            </summary>
            <param name="builder">Form builder.</param>
            <param name="name">Name of field within schema.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson">
            <summary>Build a form by specifying messages, fields and confirmations through JSON Schema or programatically.</summary>
            <remarks>
            Define  a form via [JSON Schema](http://json-schema.org/latest/json-schema-validation.html)
            with optional additional annotations that correspond to the attributes provided for C#.  
            %FormFlow makes use of a number of standard [JSON Schema](http://json-schema.org/latest/json-schema-validation.html) keywords include:
            * `type` -- Defines the fields type.
            * `enum` -- Defines the possible field values.
            * `minimum` -- Defines the minimum allowed value as described in <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/>.
            * `maximum` -- Defines the maximum allowed value as described in <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/>.
            * `required` -- Defines what fields are required.
            * `pattern` -- For string fields will be used to validate the entered pattern as described in <see cref="T:Microsoft.Bot.Builder.FormFlow.PatternAttribute"/>.
            
            Templates and prompts use the same vocabulary as <see cref="T:Microsoft.Bot.Builder.FormFlow.TemplateAttribute"/> and <see cref="T:Microsoft.Bot.Builder.FormFlow.PromptAttribute"/>.  
            The property names are the same and the values are the same as those in the underlying C# enumeration.  
            For example to define a template to override the <see cref="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NotUnderstood"/> template
            and specify a TemplateBaseAttribute.ChoiceStyle, you would put this in your schema: 
            ~~~
            "Templates":{ "NotUnderstood": { Patterns: ["I don't get it"], "ChoiceStyle":"Auto"}}
            ~~~
            
            %Extensions defined at the root fo the schema
            * `OnCompletion: script` -- C# script with arguments (<see cref="T:Microsoft.Bot.Builder.Dialogs.IDialogContext"/> context, JObject state) for completing form.
            * `References: [assemblyReference, ...]` -- Define references to include in scripts.  Paths should be absolute, or relative to the current directory.  By default Microsoft.Bot.Builder.dll is included.
            * `Imports: [import, ...]` -- Define imports to include in scripts with usings. By default these namespaces are included: Microsoft.Bot.Builder, Microsoft.Bot.Builder.Dialogs, Microsoft.Bot.Builder.FormFlow, Microsoft.Bot.Builder.FormFlow.Advanced, System.Collections.Generic, System.Linq
            
            %Extensions defined at the root of a schema or as a peer of the "type" property.  
            * `Templates:{TemplateUsage: { Patterns:[string, ...], &lt;args&gt; }, ...}` -- Define templates.
            * `Prompt: { Patterns:[string, ...] &lt;args&gt;}` -- Define a prompt.
            
            %Extensions that are found in a property description as peers to the "type" property of a JSON Schema.
            * `DateTime:bool` -- Marks a field as being a DateTime field.
            * `Describe:string` -- Description of a field as described in <see cref="T:Microsoft.Bot.Builder.FormFlow.DescribeAttribute"/>.
            * `Terms:[string,...]` -- Regular expressions for matching a field value as described in <see cref="T:Microsoft.Bot.Builder.FormFlow.TermsAttribute"/>.
            * `MaxPhrase:int` -- This will run your terms through <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/> to expand them.
            * `Values:{ string: {Describe:string, Terms:[string, ...], MaxPhrase}, ...}` -- The string must be found in the types "enum" and this allows you to override the automatically generated descriptions and terms.  If MaxPhrase is specified the terms are passed through <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/>.
            * `Active:script` -- C# script with arguments (JObject state)->bool to test to see if field/message/confirm is active.
            * `Validate:script` -- C# script with arguments (JObject state, object value)->ValidateResult for validating a field value.
            * `Define:script` -- C# script with arguments (JObject state, Field&lt;JObject&gt; field) for dynamically defining a field.  
            * `Before:[confirm|message, ...]` -- Messages or confirmations before the containing field.
            * `After:[confirm|message, ...]` -- Messages or confirmations after the containing field.
            * `{Confirm:script|[string, ...], ...templateArgs}` -- With Before/After define a confirmation through either C# script with argument (JObject state) or through a set of patterns that will be randomly selected with optional template arguments.
            * `{Message:script|[string, ...] ...templateArgs}` -- With Before/After define a message through either C# script with argument (JObject state) or through a set of patterns that will be randomly selected with optional template arguments.
            * `Dependencies`:[string, ...]` -- Fields that this field, message or confirm depends on.
            
            Scripts can be any C# code you would find in a method body.  You can add references through "References" and using through "Imports". Special global variables include:
            * `choice` -- internal dispatch for script to execute.
            * `state` -- JObject form state bound for all scripts.
            * `ifield` -- <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1"/> to allow reasoning over the current field for all scripts except %Message/Confirm prompt builders.
            * `value` -- object value to be validated for Validate.
            * `field` -- <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/> to allow dynamically updating a field in Define.
            * `context` -- <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialogContext"/> context to allow posting results in OnCompletion.
            
            %Fields defined through this class have the same ability to extend or override the definitions
            programatically as any other field.  They can also be localized in the same way.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create a JSON form builder.
            </summary>
            <param name="schema">JSON Schema that defines form.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals">
            <summary>
            Global values to pass into scripts defined using <see cref="T:Microsoft.Bot.Builder.FormFlow.Json.FormBuilderJson"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals.choice">
            <summary>
            Which script to execute.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals.state">
            <summary>
            Current form state.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals.value">
            <summary>
            Value to be validated.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals.ifield">
            <summary>
            Current field if any.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals.field">
            <summary>
            Field to be dynamically defined.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.ScriptGlobals.context">
            <summary>
            Dialog context for OnCompletionAsync handlers.
            </summary>
        </member>
    </members>
</doc>
